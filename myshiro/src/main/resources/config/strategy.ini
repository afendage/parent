#Authenticator：职责是验证用户帐号。
#        如果验证成功，将返回AuthenticationInfo 验证信息；此信息中包含了身份及凭证；
#        如果验证失败将抛出相应的AuthenticationException实现。

#AuthenticationStrategy :
#       SecurityManager接口继承了Authenticator，另外还有一个ModularRealmAuthenticator实现，
#       其委托给多个Realm 进行验证，验证规则通过AuthenticationStrategy 接口指定，默认提供
#       的实现：
#           FirstSuccessfulStrategy：只要有一个Realm验证成功即可，只返回第一个Realm身份验证
#           成功的认证信息，其他的忽略；
#           AtLeastOneSuccessfulStrategy：只要有一个Realm验证成功即可，和FirstSuccessfulStrategy
#           不同，返回所有Realm身份验证成功的认证信息；
#           AllSuccessfulStrategy：所有Realm验证成功才算成功，且返回所有Realm身份验证成功的
#           认证信息，如果有一个失败就失败了。
#       ModularRealmAuthenticator默认使用AtLeastOneSuccessfulStrategy策略。

#指定securityManager的authenticator实现
authenticator = org.apache.shiro.authc.pam.ModularRealmAuthenticator
securityManager.authenticator = $authenticator

#指定securityManager.authenticator 的 authenticationStrategy
allSuccessfulStrategy = org.apache.shiro.authc.pam.AllSuccessfulStrategy
securityManager.authenticator.authenticationStrategy = $allSuccessfulStrategy

myRealm1 = com.core.parent.myshiro.system.realm.MyRealm1
myRealm2 = com.core.parent.myshiro.system.realm.MyRealm2
myRealm3 = com.core.parent.myshiro.system.realm.MyRealm3
securityManager.realms = $myRealm1,$myRealm3